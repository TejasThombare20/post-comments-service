version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: post-comment-db
    environment:
      POSTGRES_DB: post_comments_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped

  # Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: post-comment-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=post_comments_db
      - DB_SSLMODE=disable
      - PORT=8080
      - ENVIRONMENT=development
      - LOG_LEVEL=info
      - DEBUG=true
      - JWT_SECRET_KEY=your-super-secret-jwt-key-that-is-at-least-32-characters-long
      - JWT_ACCESS_TOKEN_DURATION=15m
      - JWT_REFRESH_TOKEN_DURATION=168h
      - DB_MAX_OPEN_CONNS=25
      - DB_MAX_IDLE_CONNS=5
      - DB_CONN_MAX_LIFETIME=5m
      - SERVER_READ_TIMEOUT=15s
      - SERVER_WRITE_TIMEOUT=15s
      - SERVER_IDLE_TIMEOUT=60s
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (for future caching needs)
  redis:
    image: redis:7-alpine
    container_name: post-comment-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Adminer (Database management tool)
  adminer:
    image: adminer:latest
    container_name: post-comment-adminer
    ports:
      - "8081:8080"
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge 